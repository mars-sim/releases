/**
 * Mars Simulation Project
 * PowerGrid.java
 * @version 2.75 2003-01-25
 * @author Scott Davis
 */
 
package org.mars_sim.msp.simulation.structure;
 
import java.io.Serializable;
import java.util.Iterator;
import org.mars_sim.msp.simulation.structure.building.*;
import org.mars_sim.msp.simulation.structure.building.function.PowerGeneration;
 
/**
 * The PowerGrid class is a settlement's building power grid.
 */
public class PowerGrid implements Serializable {
        
    // Data members
    private double powerGenerated;
    private double powerRequired;
    private boolean sufficientPower;
    private Settlement settlement;
    
    /**
     * Constructor
     */
    public PowerGrid(Settlement settlement) {
        this.settlement = settlement;
        powerGenerated = 0D;;
        powerRequired = 0D;
        sufficientPower = true;
    }
    
    /**
     * Gets the generated power in the grid.
     * @return power in kW
     */
    public double getGeneratedPower() {
        return powerGenerated;
    }
    
    /**
     * Gets the power required from the grid.
     * @return power in kW
     */
    public double getRequiredPower() {
        return powerRequired;
    }
    
    /**
     * Checks if there is enough power in the grid for all 
     * buildings to be set to full power.
     * @return true if sufficient power
     */
    public boolean isSufficientPower() {
        return sufficientPower;
    }
    
    /**
     * Time passing for power grid.
     *
     * @param time amount of time passing (in millisols)
     */
    public void timePassing(double time) {
        
        // System.out.println("");
        
        // Clear and recalculate power
        powerGenerated = 0D;
        powerRequired = 0D;
        
        BuildingManager manager = settlement.getBuildingManager();
        
        // Determine total power generated by buildings.
        Iterator iPow = manager.getBuildings(PowerGeneration.class);
        while (iPow.hasNext()) {
            PowerGeneration gen = (PowerGeneration) iPow.next();
            powerGenerated += gen.getGeneratedPower();
        }
        
        // System.out.println(settlement.getName() + " power generated: " + powerGenerated);
        
        // Determine total power used by buildings when set to full power mode.
        Iterator iUsed = manager.getBuildings();
        while (iUsed.hasNext()) {
            Building building = (Building) iUsed.next();
            powerRequired += building.getFullPowerRequired();
        }
        
        // System.out.println(settlement.getName() + " power required: " + powerRequired);
        
        // Check if there is enough power generated to fully supply each building.
        if (powerRequired <= powerGenerated) {
            sufficientPower = true;
            // System.out.println(settlement.getName() + " has sufficient power");
        }
        else {
            sufficientPower = false;
            // System.out.println(settlement.getName() + " has insufficient power");
            double neededPower = powerRequired - powerGenerated;
            // System.out.println(settlement.getName() + " needs " + neededPower + " kW.");
            
            // Reduce each building's power mode to low power until 
            // required power reduction is met.
            Iterator iLowPower = manager.getBuildings();
            while (iLowPower.hasNext() && (neededPower > 0D)) {
                Building building = (Building) iLowPower.next();
                if (!(building instanceof PowerGeneration)) {
                    building.setPowerMode(Building.POWER_DOWN);
                    // System.out.println(building.getName() + " powered down");
                    neededPower -= building.getFullPowerRequired() - 
                        building.getPoweredDownPowerRequired();
                    // System.out.println(settlement.getName() + " still needs " + neededPower + " kW.");
                }
            }
            
            // If power needs are still not met, turn off the power to each 
            // uninhabitable building until required power reduction is met.
            if (neededPower > 0D) {
                Iterator iNoPower = manager.getBuildings();
                while (iNoPower.hasNext() && (neededPower > 0D)) {
                    Building building = (Building) iNoPower.next();
                    if (!(building instanceof PowerGeneration) && 
                        !(building instanceof InhabitableBuilding)) {
                        building.setPowerMode(Building.NO_POWER);
                        // System.out.println(building.getName() + " shut down");
                        neededPower -= building.getPoweredDownPowerRequired();
                        // System.out.println(settlement.getName() + " still needs " + neededPower + " kW.");
                    }
                }
            }
            
            // If power needs are still not met, turn off the power to each inhabitable building 
            // until required power reduction is met.
            if (neededPower > 0D) {
                Iterator iNoPower = manager.getBuildings();
                while (iNoPower.hasNext() && (neededPower > 0D)) {
                    Building building = (Building) iNoPower.next();
                    if (!(building instanceof PowerGeneration) && 
                        building instanceof InhabitableBuilding) {
                        building.setPowerMode(Building.NO_POWER);
                        // System.out.println(building.getName() + " shut down");
                        neededPower -= building.getPoweredDownPowerRequired();
                        // System.out.println(settlement.getName() + " still needs " + neededPower + " kW.");
                    }
                }
            }
        }
    }  
}
